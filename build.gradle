plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

javafx {
    version = "21.0.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base']
}

group ''
version '0.0.1-ALPHA'
application {
    mainClass.set('EntryPoint')
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

//adds maven central as a maven repository
repositories {
    mavenCentral()
}

/* The following lines are extensively documented. Please remove the documentation when you have read and understood it. */
dependencies {
    // EXAMPLE: LOGGING
    /*
    The following adds the logging framework Apache Log4J2.
    The statements serve as an example on how to use libraries.
    Since these are `implementation` dependencies, they are packed in the final jar.
    Read the documentation at https://docs.gradle.org/current/userguide/declaring_dependencies.html to learn more
     */
    // TODO make these dependencies work
    //implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.commons:commons-lang3:3.14.0'


    /*
    This is another example - it imports the javafx-controls dependency
     */
    //implementation 'org.openjfx:javafx-controls:19.0.2.1'

    // JUNIT
    /*
    The following dependency is required to perform JUnit tests, as for example HelloWorldTest.
    Since it is a `testCompile` dependency, it will not be part of the final product, only during testing.
     */
    testImplementation("org.junit.jupiter:junit-jupiter:5.+")
    testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:5.+")
    testImplementation ("org.mockito:mockito-core:3.+")
    testImplementation ("org.mockito:mockito-junit-jupiter:3.+")
}

tasks.register("build-cs108") {
    dependsOn jar, javadoc
}

test {
    useJUnitPlatform()
}

/*
The following block adds both compile and runtime dependencies to the jar
 */
jar {
    manifest {
        attributes(
                'Main-Class': application.getMainClass().get()
        )
    }
    duplicatesStrategy = DuplicatesStrategy.WARN // two hours for this stupid line..
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
